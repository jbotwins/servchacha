{"version":3,"sources":["components/List/List.js","components/Post/Post.js","components/App/App.js","serviceWorker.js","index.js"],"names":["List","str","slice","className","this","props","title","description","source","shorten","post_hint","exact","to","permalink","onClick","onClickLink","bind","src","imageUrl","alt","height","imageHeight","width","imageWidth","undefined","url","linkName","Component","Post","input","__html","parse","data","thumbnail","selftext","media","dangerouslySetInnerHTML","htmlReactParser","oembed","html","href","rel","target","App","state","navigationItems","name","uri","fetchedPopular","currentContentType","currentPathName","listData","history","fetchPopular","fetch","then","response","json","setState","popularSubredditData","children","fetchDataUri","kind","Array","isArray","length","postData","postCommentData","updateHistory","historyArray","unshift","updateData","val","pathname","window","location","map","item","index","key","activeClassName","post","isPopular","type","thumbnail_height","thumbnail_width","comments","author","unix","created_utc","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d1f91e5a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom'\nimport ReactMarkdown from 'react-markdown';\n\nimport './List.css';\n\nclass List extends Component {\n    shorten(str) {\n        // shortens lengthy descriptions to teaser length\n        const teaser = str.slice(0, 200)\n        return teaser\n    }\n\n    render() {\n        return (\n            <div className=\"row\">\n                <div className=\"col\">\n                    <div className=\"card\">\n                        <div className=\"card-body\">\n                            <h1 className=\"card-title\">{this.props.title}</h1>\n                            <p className=\"card-text\">\n                                {/* Conditionally show description trimmed to teaser length */}\n                                {!this.props.description\n                                    ? null :\n                                    <ReactMarkdown\n                                        source={this.shorten(this.props.description)}\n                                    />\n                                }\n                            </p>\n                            {/* Conditonally show an image with link */}\n                            {this.props.post_hint === \"image\" ?\n                                <div className=\"row\">\n                                    <Link\n                                        exact to={this.props.permalink}\n                                        onClick={this.props.onClickLink.bind(this, this.props.permalink)}\n                                    >\n                                        <img\n                                            className=\"ml-3 mb-3\"\n                                            src={this.props.imageUrl}\n                                            alt=\"\"\n                                            height={this.props.imageHeight}\n                                            width={this.props.imageWidth}\n                                        />\n                                    </Link>\n\n                                </div>\n                                : null\n                            }\n                            {/* Conditionally show link is its a post from the popular subreddit list */}\n                            {this.props.url === undefined\n                                ? null :\n                                <Link\n                                    exact to={this.props.url}\n                                    className=\"btn btn-outline-success\"\n                                    onClick={this.props.onClickLink.bind(this, this.props.url)}\n                                >{this.props.linkName}\n                                </Link>}\n                            {/* Conditionally show link is its a post from a subreddit */}\n                            {this.props.permalink === undefined\n                                ? null :\n                                <Link\n                                    exact to={this.props.permalink}\n                                    className=\"btn btn-outline-success\"\n                                    onClick={this.props.onClickLink.bind(this, this.props.permalink)}\n                                >{this.props.linkName}\n                                </Link>}\n                        </div>\n                    </div>\n                    <br />\n                </div>\n            </div>\n        )\n    }\n}\nexport default List;","import React, { Component } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport parse from 'html-react-parser';\n\nclass Post extends Component {\n    htmlReactParser(input) {\n        let parsed = parse(input);\n        const output = { __html: parsed }\n        return output\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <h1>{this.props.data.title}</h1>\n                    {/* These four separate conditional expressions show post data based on availability */}\n                    {this.props.data.thumbnail !== null ?\n                        <div className=\"row\">\n                            <img className=\"ml-3 mb-3\" src={this.props.data.url} alt=\"\" />\n                        </div>\n                        : null\n                    }\n                    {this.props.data.thumbnail === \"self\" ?\n                        <div className=\"row\">\n                            <ReactMarkdown source={this.props.data.selftext} />\n                        </div>\n                        : null\n                    }\n                    {this.props.data.post_hint === \"link\" && this.props.data.media !== null ?\n                        <div className=\"row\">\n                            <div dangerouslySetInnerHTML={this.htmlReactParser(this.props.data.media.oembed.html)} />\n                        </div>\n                        : null\n                    }\n                    {this.props.data.url !== null ?\n                        <div className=\"row\">\n                            <a href={this.props.data.url} rel=\"noopener noreferrer\" target=\"_blank\" >{this.props.data.url}</a>\n                        </div>\n                        : null\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Post;","import React, { Component } from 'react';\n\nimport { NavLink } from 'react-router-dom'\n\nimport List from '../List/List'\nimport Post from '../Post/Post'\n\nimport Moment from 'react-moment';\n\nclass App extends Component {\n\tstate = {\n\t\tnavigationItems: [\n\t\t\t{\n\t\t\t\tname: 'Show Popular Subreddits',\n\t\t\t\turi: '/'\n\t\t\t}\n\t\t],\n\t\tfetchedPopular: false,\n\t\tcurrentContentType: '',\n\t\tcurrentPathName: '',\n\t\tlistData: [],\n\t\thistory: []\n\n\t}\n\n\tfetchPopular = () => {\n\t\tfetch(\"http://www.reddit.com/subreddits/popular.json\")\n\t\t\t.then(response => response.json())\n\t\t\t.then(data => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tfetchedPopular: true,\n\t\t\t\t\tpopularSubredditData: data.data.children,\n\t\t\t\t}, () => {\n\t\t\t\t\tif (this.state.currentPathName === \"/\") {\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\tcurrentContentType: 'list'\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t});\n\t}\n\n\tfetchDataUri = () => {\n\t\tconst uri = this.state.currentPathName;\n\t\tif (this.state.fetchedPopular === false && uri === \"/\") {\n\t\t\tthis.fetchPopular();\n\t\t} else {\n\t\t\tconst url = \"http://www.reddit.com\" + uri + '.json'\n\t\t\tfetch(url)\n\t\t\t\t.then(response => response.json())\n\t\t\t\t.then(data => {\n\t\t\t\t\t// check if popular data exists, if not get it\n\t\t\t\t\tif (this.state.fetchedPopular === false) { this.fetchPopular(); }\n\t\t\t\t\t// interpret data type and update state accordingly i.e. list vs. individual post\n\t\t\t\t\tif (data.kind === \"Listing\" && data.data.children !== undefined) {\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\tcurrentContentType: \"list\",\n\t\t\t\t\t\t\tlistData: data.data.children\n\t\t\t\t\t\t});\n\t\t\t\t\t} else if (Array.isArray(data) && data.length === 2 && data[0].kind === \"Listing\" && data[1].kind === \"Listing\") {\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\tcurrentContentType: \"post\",\n\t\t\t\t\t\t\tpostData: data[0].data.children[0].data,\n\t\t\t\t\t\t\tpostCommentData: data[1].data.children\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t}\n\t}\n\n\tupdateHistory = (uri) => {\n\t\t// add last url to the history array and updte state\n\t\tconst historyArray = this.state.history\n\t\thistoryArray.unshift(uri)\n\t\tthis.setState({\n\t\t\thistory: historyArray\n\t\t})\n\t}\n\n\tupdateData = (val) => {\n\t\t// check if on a page other than popular and invoke history update\n\t\tif (this.state.currentPathName.length > 1) {\n\t\t\tthis.updateHistory(this.state.currentPathName)\n\t\t}\n\n\t\t// these if statements allow this one function to handle the inital grab of data and following updates\n\t\tif (val === undefined) {\n\t\t\tconst pathname = window.location.pathname;\n\t\t\tthis.setState({\n\t\t\t\tcurrentPathName: pathname\n\t\t\t}, () => {\n\t\t\t\t// run fetch data function\n\t\t\t\tthis.fetchDataUri()\n\t\t\t})\n\t\t} else {\n\t\t\tthis.setState({\n\t\t\t\tcurrentPathName: val\n\t\t\t}, () => {\n\t\t\t\t// run fetch data function\n\t\t\t\tthis.fetchDataUri()\n\t\t\t})\n\t\t}\n\n\t}\n\n\tcomponentDidMount() {\n\t\t// minimal impact on lifecycle functions\n\t\tthis.updateData()\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"container\">\n\t\t\t\t<div className=\"row\">\n\t\t\t\t\t<div className=\"row m-5\">\n\t\t\t\t\t\t<ul className=\"nav nav-pills\">\n\t\t\t\t\t\t\t{this.state.navigationItems.map((item, index) => (\n\t\t\t\t\t\t\t\t<li key={index} className=\"nav-item\">\n\t\t\t\t\t\t\t\t\t<NavLink\n\t\t\t\t\t\t\t\t\t\texact to={item.uri}\n\t\t\t\t\t\t\t\t\t\tclassName={\"btn btn-outline-success\"}\n\t\t\t\t\t\t\t\t\t\tactiveClassName=\"active\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => this.updateData(item.uri)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{item.name}\n\t\t\t\t\t\t\t\t\t</NavLink>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"row\">\n\t\t\t\t\t<div className=\"col-7\">\n\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t{/* Conditionally show the popular list of subreddits */}\n\t\t\t\t\t\t\t{this.state.currentContentType === \"list\" && this.state.currentPathName === \"/\" ?\n\t\t\t\t\t\t\t\t<div className=\"container\">\n\t\t\t\t\t\t\t\t\t<h1>Popular Subreddits Right Now:</h1>\n\t\t\t\t\t\t\t\t\t{this.state.popularSubredditData.map((post, index) => (\n\t\t\t\t\t\t\t\t\t\t<List\n\t\t\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\t\t\tisPopular={true}\n\t\t\t\t\t\t\t\t\t\t\ttitle={post.data.title}\n\t\t\t\t\t\t\t\t\t\t\ttype=\"subreddit\"\n\t\t\t\t\t\t\t\t\t\t\tdescription={post.data.description}\n\t\t\t\t\t\t\t\t\t\t\turl={post.data.url}\n\t\t\t\t\t\t\t\t\t\t\tlinkName=\"Go to subreddit\"\n\t\t\t\t\t\t\t\t\t\t\tonClickLink={this.updateData}\n\t\t\t\t\t\t\t\t\t\t></List>\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t: null}\n\t\t\t\t\t\t\t{/* Conditionally show list of posts */}\n\t\t\t\t\t\t\t{this.state.currentContentType === \"list\" && this.state.currentPathName !== \"/\" ?\n\t\t\t\t\t\t\t\t<div className=\"container\">\n\t\t\t\t\t\t\t\t\t<h1>{this.state.currentPathName}</h1>\n\t\t\t\t\t\t\t\t\t{this.state.listData.map((post, index) => (\n\t\t\t\t\t\t\t\t\t\t<List\n\t\t\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\t\t\tisPopular={false}\n\t\t\t\t\t\t\t\t\t\t\ttitle={post.data.title}\n\t\t\t\t\t\t\t\t\t\t\tdescription={post.data.selftext}\n\t\t\t\t\t\t\t\t\t\t\tpost_hint={post.data.post_hint}\n\t\t\t\t\t\t\t\t\t\t\timageUrl={post.data.thumbnail}\n\t\t\t\t\t\t\t\t\t\t\timageHeight={post.data.thumbnail_height}\n\t\t\t\t\t\t\t\t\t\t\timageWidth={post.data.thumbnail_width}\n\t\t\t\t\t\t\t\t\t\t\tpermalink={post.data.permalink}\n\t\t\t\t\t\t\t\t\t\t\tlinkName=\"Show full post\"\n\t\t\t\t\t\t\t\t\t\t\tonClickLink={this.updateData}\n\t\t\t\t\t\t\t\t\t\t></List>\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t: null}\n\t\t\t\t\t\t\t{/* Conditionally show post body */}\n\t\t\t\t\t\t\t{this.state.currentContentType === \"post\" ?\n\t\t\t\t\t\t\t\t<Post\n\t\t\t\t\t\t\t\t\tdata={this.state.postData}\n\t\t\t\t\t\t\t\t\tcomments={this.state.postCommentData}>\n\t\t\t\t\t\t\t\t</Post>\n\t\t\t\t\t\t\t\t: null}\n\t\t\t\t\t\t\t{this.state.currentContentType === '' ? <h2>Content loading...</h2> : null}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"container col-4\">\n\t\t\t\t\t\t{/* Conditionally show post meta data block */}\n\t\t\t\t\t\t{this.state.currentContentType === \"post\" ?\n\t\t\t\t\t\t\t<div className=\"row ml-3\">\n\t\t\t\t\t\t\t\t<div className=\"card\">\n\t\t\t\t\t\t\t\t\t<div className=\"card-body\">\n\t\t\t\t\t\t\t\t\t\t<p className=\"card-title\"><strong>Author:</strong><br />{this.state.postData.author}</p>\n\t\t\t\t\t\t\t\t\t\t<p className=\"card-text\"><strong>Date Posted:</strong><br /><Moment unix>{this.state.postData.created_utc}</Moment></p>\n\t\t\t\t\t\t\t\t\t\t<p className=\"card-text\"><strong>Direct comment count:</strong><br />{this.state.postCommentData.length}</p>\n\t\t\t\t\t\t\t\t\t\t<p className=\"card-text\"><strong>Total replies:</strong><br />fancy recursive function coming later...</p>\n\t\t\t\t\t\t\t\t\t\t<p className=\"card-text\"><strong>Link to thing:</strong><br /><a href={this.state.postData.url} rel=\"noopener noreferrer\" target=\"_blank\" >{this.state.postData.url}</a></p>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t: null\n\t\t\t\t\t\t}\n\t\t\t\t\t\t{/* Conditionally show the history block */}\n\t\t\t\t\t\t{this.state.history.length > 0 ?\n\t\t\t\t\t\t\t<div className=\"row mt-5 ml-3\">\n\t\t\t\t\t\t\t\t<div className=\"card\">\n\t\t\t\t\t\t\t\t\t<div className=\"card-body\">\n\t\t\t\t\t\t\t\t\t\t<h4>Browsing History</h4>\n\t\t\t\t\t\t\t\t\t\t<ul className=\"list-group\">\n\t\t\t\t\t\t\t\t\t\t\t{this.state.history.map((item, index) => (\n\t\t\t\t\t\t\t\t\t\t\t\t<li className=\"list-group-item\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<NavLink\n\t\t\t\t\t\t\t\t\t\t\t\t\t\texact to={item}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => this.updateData(item)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{item}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</NavLink>\n\t\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t: null\n\t\t\t\t\t\t}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div >\n\t\t);\n\t}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}